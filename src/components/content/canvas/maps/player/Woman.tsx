/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/CubeGuyCharacter.glb -o src/components/content/canvas/maps/player/Man.tsx
*/

import {Group, Vector3} from 'three'
import {useGLTF} from '@react-three/drei'
import {usePlayer} from "./hooks/usePlayer.ts";
import { NickNameBoard } from '../structures/ground/3dUIs/NickNameBoard.tsx';
import { RefObject } from 'react';


interface ModelProps{
  player: {
      id: string;
      selectedGLBIndex:number
      nickname:string
      jobPosition:string
  } | undefined;
  nicknameRef?: RefObject<Group>;
  position: Vector3;
  modelIndex:number;
}

export function Woman({ player, position,modelIndex }: ModelProps) {
  const {me,playerRef, memoizedPosition,nicknameRef, playerId, nodes, materials} = usePlayer(
      {
        player,
        position,
        modelIndex: modelIndex ?? player?.selectedGLBIndex
      }
  )
  return (
    <>
    {me && (
            <NickNameBoard ref={nicknameRef} text={`${player?.nickname}[${player?.jobPosition}]`} isNpc={false}/>
      )}
      <group ref={playerRef} position={memoizedPosition} name={playerId ?? ''} dispose={null}>
        <group name="Root_Scene">
            <group name="RootNode">
              <group name="CharacterArmature" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
                <primitive object={nodes.Root} />
              </group>
              <skinnedMesh
                name="Character"
                geometry={nodes.Character.geometry}
                material={materials["Atlas.001"]}
                skeleton={nodes.Character.skeleton}
                rotation={[-Math.PI / 2, 0, 0]}
                scale={100}
                receiveShadow
                castShadow
              />
            </group>
          </group>
        </group>
    </>
      
  );
}


useGLTF.preload('/CubeWomanCharacter.glb')
